// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dropdown /> option templates with icon matches its snapshot 1`] = `null`;

exports[`<Dropdown /> option templates with label matches its snapshot 1`] = `null`;

exports[`<Dropdown /> when onRenderTitle is called with an array of items renders as expected 1`] = `
<Block
  className="y-dropdown--item y-dropdown--header"
  textSize="small"
>
  foo
</Block>
`;

exports[`<Dropdown /> when onRenderTitle is called with an empty array renders as expected 1`] = `null`;

exports[`<Dropdown /> when onRenderTitle is called with null returns the expected value 1`] = `null`;

exports[`<Dropdown /> with additional className matches its snapshot 1`] = `
<div
  className="y-dropdown TEST_CLASSNAME"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={Array []}
  />
</div>
`;

exports[`<Dropdown /> with all props matches its snapshot 1`] = `
<div
  className="y-dropdown TEST_CLASSNAME"
>
  <WithResponsiveMode
    ariaLabel="ARIA_LABEL"
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    label="TEST_LABEL"
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={
      Array [
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "A",
          "text": "Option a",
        },
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "B",
          "text": "Option b",
        },
      ]
    }
    placeHolder="TEST_PLACEHOLDER"
    selectedKey="A"
  />
</div>
`;

exports[`<Dropdown /> with default options matches its snapshot 1`] = `
<div
  className="y-dropdown"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={Array []}
  />
</div>
`;

exports[`<Dropdown /> with divider matches its snapshot 1`] = `null`;

exports[`<Dropdown /> with section header matches its snapshot 1`] = `null`;

exports[`<Dropdown /> without onChanged handler when an option is selected does not blow up 1`] = `
<div
  className="y-dropdown"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={
      Array [
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "A",
          "text": "Option a",
        },
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "B",
          "text": "Option b",
        },
      ]
    }
  />
</div>
`;
