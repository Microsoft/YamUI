// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dropdown /> option templates with icon matches its snapshot 1`] = `
<div
  className=
      y-block
      y-textSize-mediumSub
      y-dropdown--item
      {
        font-size: 1.4rem;
        line-height: 2.0rem;
      }
      & .y-icon {
        height: 1.4rem;
        width: 1.4rem;
      }
      & .y-text__ellipsis {
        vertical-align: -0.5rem;
      }
>
  <div
    className=
        y-block--inner
        {
          overflow-wrap: break-word;
          word-wrap: break-word;
        }
  >
    <FixedGridRow
      gutterSize="small"
    >
      <div
        className=
            y-fixedGridRow
            {
              display: flex;
            }
            & > .y-fixedGridColumn {
              margin-left: 0.8rem;
            }
            & > .y-fixedGridColumn:first-child {
              margin-left: 0px;
            }
      >
        <FixedGridColumn
          className="y-dropdown--option-icon"
          fixed={true}
        >
          <div
            className=
                y-fixedGridColumn
                y-dropdown--option-icon
                {
                  flex-basis: auto;
                  flex-grow: 0;
                  flex-shrink: 1;
                  min-width: auto;
                }
          >
            <Add
              block={true}
              size="16"
            >
              <svg
                aria-hidden="true"
                className=
                    y-icon
                    {
                      display: block;
                      fill: currentColor;
                      pointer-events: none;
                      position: relative;
                      top: 0.2rem;
                      vertical-align: 0;
                    }
                focusable="false"
                style={
                  Object {
                    "height": "16px",
                    "width": "16px",
                  }
                }
                tabIndex={-1}
                viewBox="0 0 240 240"
              >
                <path
                  d="M240 112.5v15H127.5V240h-15V127.5H0v-15h112.5V0h15v112.5z"
                  fillRule="evenodd"
                />
              </svg>
            </Add>
          </div>
        </FixedGridColumn>
        <FixedGridColumn
          className="y-dropdown--ellipsed-title"
        >
          <div
            className=
                y-fixedGridColumn
                y-dropdown--ellipsed-title
                {
                  flex-basis: 100%;
                  flex-grow: 1;
                  flex-shrink: 1;
                  min-width: 0px;
                }
          >
            <span>
              with icon
            </span>
          </div>
        </FixedGridColumn>
      </div>
    </FixedGridRow>
  </div>
</div>
`;

exports[`<Dropdown /> option templates with label matches its snapshot 1`] = `
<div
  className=
      y-block
      y-textSize-mediumSub
      y-dropdown--item
      {
        font-size: 1.4rem;
        line-height: 2.0rem;
      }
      & .y-icon {
        height: 1.4rem;
        width: 1.4rem;
      }
      & .y-text__ellipsis {
        vertical-align: -0.5rem;
      }
>
  <div
    className=
        y-block--inner
        {
          overflow-wrap: break-word;
          word-wrap: break-word;
        }
  >
    <div
      className="y-dropdown--ellipsed-title"
    >
      <span>
        <CustomizedText
          bold={true}
        >
          <CustomizableText
            bold={true}
            theme={
              Object {
                "disableGlobalClassNames": false,
                "fonts": Object {
                  "large": Object {
                    "fontSize": "1.8rem",
                    "lineHeight": "2.4rem",
                  },
                  "medium": Object {
                    "fontSize": "1.5rem",
                    "lineHeight": "2.0rem",
                  },
                  "mediumPlus": Object {
                    "MozOsxFontSmoothing": "grayscale",
                    "WebkitFontSmoothing": "antialiased",
                    "fontFamily": "'Segoe UI', 'Segoe UI Web (West European)', 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",
                    "fontSize": "15px",
                    "fontWeight": 400,
                  },
                  "mega": Object {
                    "MozOsxFontSmoothing": "grayscale",
                    "WebkitFontSmoothing": "antialiased",
                    "fontFamily": "'Segoe UI', 'Segoe UI Web (West European)', 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",
                    "fontSize": "72px",
                    "fontWeight": 100,
                  },
                  "small": Object {
                    "fontSize": "1.2rem",
                    "lineHeight": "1.6rem",
                  },
                  "smallPlus": Object {
                    "fontSize": "1.4rem",
                    "lineHeight": "2.0rem",
                  },
                  "superLarge": Object {
                    "MozOsxFontSmoothing": "grayscale",
                    "WebkitFontSmoothing": "antialiased",
                    "fontFamily": "'Segoe UI', 'Segoe UI Web (West European)', 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",
                    "fontSize": "42px",
                    "fontWeight": 100,
                  },
                  "tiny": Object {
                    "MozOsxFontSmoothing": "grayscale",
                    "WebkitFontSmoothing": "antialiased",
                    "fontFamily": "'Segoe UI', 'Segoe UI Web (West European)', 'Segoe UI', -apple-system, BlinkMacSystemFont, 'Roboto', 'Helvetica Neue', sans-serif",
                    "fontSize": "10px",
                    "fontWeight": 600,
                  },
                  "xLarge": Object {
                    "fontSize": "2.2rem",
                    "lineHeight": "2.8rem",
                  },
                  "xSmall": Object {
                    "fontSize": "1.0rem",
                    "lineHeight": "1.6rem",
                  },
                  "xxLarge": Object {
                    "fontSize": "2.4rem",
                    "lineHeight": "2.8rem",
                  },
                },
                "isInverted": false,
                "palette": Object {
                  "accent": "#6c98d9",
                  "black": "#000000",
                  "blackTranslucent40": "rgba(0,0,0,.4)",
                  "blue": "#0078d4",
                  "blueDark": "#002050",
                  "blueLight": "#00bcf2",
                  "blueMid": "#00188f",
                  "green": "#107c10",
                  "greenDark": "#004b1c",
                  "greenLight": "#bad80a",
                  "magenta": "#b4009e",
                  "magentaDark": "#5c005c",
                  "magentaLight": "#e3008c",
                  "neutralDark": "#dde0e6",
                  "neutralLight": "#edeff2",
                  "neutralLighter": "#f3f5f8",
                  "neutralLighterAlt": "#f8f8f8",
                  "neutralPrimary": "#343A41",
                  "neutralPrimaryAlt": "#495361",
                  "neutralQuaternary": "#d0d0d0",
                  "neutralQuaternaryAlt": "#dadada",
                  "neutralSecondary": "#646d7a",
                  "neutralSecondaryAlt": "#767676",
                  "neutralTertiary": "#dde0e6",
                  "neutralTertiaryAlt": "#a8b0bd",
                  "orange": "#d83b01",
                  "orangeLight": "#ea4300",
                  "orangeLighter": "#ff8c00",
                  "purple": "#5c2d91",
                  "purpleDark": "#32145a",
                  "purpleLight": "#b4a0ff",
                  "red": "#d1423b",
                  "redDark": "#9e3028",
                  "teal": "#008272",
                  "tealDark": "#004b50",
                  "tealLight": "#00b294",
                  "themeDark": "#386cbb",
                  "themeDarkAlt": "#2f5c9f",
                  "themeDarker": "#264f8c",
                  "themeLight": "#c7e0f4",
                  "themeLighter": "#9ac3ff",
                  "themeLighterAlt": "#eff6fc",
                  "themePrimary": "#6c98d9",
                  "themeSecondary": "#2b88d8",
                  "themeTertiary": "#71afe5",
                  "white": "#ffffff",
                  "whiteTranslucent40": "rgba(255,255,255,.4)",
                  "yellow": "#ffc56c",
                  "yellowLight": "#fff100",
                },
                "semanticColors": Object {
                  "blockingBackground": "rgba(234, 67, 0, .2)",
                  "bodyBackground": "#ffffff",
                  "bodyDivider": "#dde0e6",
                  "bodyFrameBackground": "#ffffff",
                  "bodySubtext": "#646d7a",
                  "bodyText": "#343A41",
                  "bodyTextChecked": "#000000",
                  "buttonBackground": "#f3f5f8",
                  "buttonBackgroundChecked": "#a8b0bd",
                  "buttonBackgroundCheckedHovered": "#edeff2",
                  "buttonBackgroundHovered": "#edeff2",
                  "buttonBorder": "transparent",
                  "buttonText": "#495361",
                  "buttonTextChecked": "#dde0e6",
                  "buttonTextCheckedHovered": "#000000",
                  "buttonTextHovered": "#000000",
                  "disabledBackground": "#f3f5f8",
                  "disabledBodyText": "#a8b0bd",
                  "disabledSubtext": "#d0d0d0",
                  "disabledText": "#dde0e6",
                  "errorBackground": "#fb7f78",
                  "errorText": "#d1423b",
                  "focusBorder": "#000000",
                  "inputBackground": "#ffffff",
                  "inputBackgroundChecked": "#386cbb",
                  "inputBackgroundCheckedHovered": "#6c98d9",
                  "inputBorder": "#dde0e6",
                  "inputBorderHovered": "#dde0e6",
                  "inputFocusBorderAlt": "#6c98d9",
                  "inputForegroundChecked": "#ffffff",
                  "inputPlaceholderText": "#646d7a",
                  "link": "#386cbb",
                  "linkHovered": "#264f8c",
                  "listBackground": "#ffffff",
                  "listHeaderBackgroundHovered": "#f3f5f8",
                  "listHeaderBackgroundPressed": "#edeff2",
                  "listItemBackgroundChecked": "#edeff2",
                  "listItemBackgroundCheckedHovered": "#dadada",
                  "listItemBackgroundHovered": "#f3f5f8",
                  "listText": "#343A41",
                  "listTextColor": "#343A41",
                  "menuHeader": "#6c98d9",
                  "menuIcon": "#6c98d9",
                  "menuItemBackgroundChecked": "#edeff2",
                  "menuItemBackgroundHovered": "#f3f5f8",
                  "smallInputBorder": "#646d7a",
                  "successBackground": "rgba(186, 216, 10, .2)",
                  "warningBackground": "#ffc56c",
                  "warningHighlight": "#ffb900",
                  "warningText": "#333333",
                },
              }
            }
          >
            <span
              className=
                  y-text
                  {
                    display: inline-block;
                    font-weight: 600;
                  }
            >
              label
              :
            </span>
          </CustomizableText>
        </CustomizedText>
         
        with icon
      </span>
    </div>
  </div>
</div>
`;

exports[`<Dropdown /> when onRenderTitle is called with an array of items renders as expected 1`] = `
<CustomizedBlock
  className="y-dropdown--item y-dropdown--header"
  textSize="small"
>
  foo
</CustomizedBlock>
`;

exports[`<Dropdown /> when onRenderTitle is called with an empty array renders as expected 1`] = `null`;

exports[`<Dropdown /> when onRenderTitle is called with null returns the expected value 1`] = `null`;

exports[`<Dropdown /> with additional className matches its snapshot 1`] = `
<div
  className="y-dropdown TEST_CLASSNAME"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={Array []}
  />
</div>
`;

exports[`<Dropdown /> with all props matches its snapshot 1`] = `
<div
  className="y-dropdown TEST_CLASSNAME"
>
  <WithResponsiveMode
    ariaLabel="ARIA_LABEL"
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    label="TEST_LABEL"
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={
      Array [
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "A",
          "text": "Option a",
        },
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "B",
          "text": "Option b",
        },
      ]
    }
    placeHolder="TEST_PLACEHOLDER"
    selectedKey="A"
  />
</div>
`;

exports[`<Dropdown /> with default options matches its snapshot 1`] = `
<div
  className="y-dropdown"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={Array []}
  />
</div>
`;

exports[`<Dropdown /> with divider matches its snapshot 1`] = `null`;

exports[`<Dropdown /> with section header matches its snapshot 1`] = `
<div
  className=
      y-block
      y-textSize-small
      y-dropdown--item
      y-dropdown--header
      {
        font-size: 1.2rem;
        line-height: 1.6rem;
      }
      &.y-block .y-icon {
        top: 0.1rem;
      }
      & .y-icon {
        height: 1.2rem;
        width: 1.2rem;
      }
      & .y-text__ellipsis {
        vertical-align: -0.3rem;
      }
>
  <div
    className=
        y-block--inner
        {
          overflow-wrap: break-word;
          word-wrap: break-word;
        }
  >
    header1
  </div>
</div>
`;

exports[`<Dropdown /> without onChanged handler when an option is selected does not blow up 1`] = `
<div
  className="y-dropdown"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={
      Array [
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "A",
          "text": "Option a",
        },
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "B",
          "text": "Option b",
        },
      ]
    }
  />
</div>
`;
