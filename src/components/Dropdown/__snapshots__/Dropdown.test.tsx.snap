// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Dropdown /> option templates with icon matches its snapshot 1`] = `
<div
  className=
      y-block
      y-textSize-mediumSub
      y-dropdown--item
      {
        font-size: 1.4rem;
        line-height: 2.0rem;
      }
      & .y-icon {
        height: 1.4rem;
        width: 1.4rem;
      }
      & .y-text__ellipsis {
        vertical-align: -0.5rem;
      }
>
  <div
    className=
        y-block--inner
        {
          overflow-wrap: break-word;
          word-wrap: break-word;
        }
  >
    <FixedGridRow
      gutterSize="small"
    >
      <div
        className=
            y-fixedGridRow
            {
              display: flex;
            }
            & > .y-fixedGridColumn {
              margin-left: 0.8rem;
            }
            & > .y-fixedGridColumn:first-child {
              margin-left: 0px;
            }
      >
        <FixedGridColumn
          className="y-dropdown--option-icon"
          fixed={true}
        >
          <div
            className=
                y-fixedGridColumn
                y-dropdown--option-icon
                {
                  flex-basis: auto;
                  flex-grow: 0;
                  flex-shrink: 1;
                  min-width: auto;
                }
          >
            <Add
              block={true}
              size="16"
            >
              <svg
                aria-hidden="true"
                className=
                    y-icon
                    {
                      display: block;
                      fill: currentColor;
                      pointer-events: none;
                      position: relative;
                      top: 0.2rem;
                      vertical-align: 0;
                    }
                focusable="false"
                style={
                  Object {
                    "height": "16px",
                    "width": "16px",
                  }
                }
                tabIndex={-1}
                viewBox="0 0 240 240"
              >
                <path
                  d="M240 112.5v15H127.5V240h-15V127.5H0v-15h112.5V0h15v112.5z"
                  fillRule="evenodd"
                />
              </svg>
            </Add>
          </div>
        </FixedGridColumn>
        <FixedGridColumn
          className="y-dropdown--ellipsed-title"
        >
          <div
            className=
                y-fixedGridColumn
                y-dropdown--ellipsed-title
                {
                  flex-basis: 100%;
                  flex-grow: 1;
                  flex-shrink: 1;
                  min-width: 0px;
                }
          >
            <span>
              with icon
            </span>
          </div>
        </FixedGridColumn>
      </div>
    </FixedGridRow>
  </div>
</div>
`;

exports[`<Dropdown /> option templates with label matches its snapshot 1`] = `
<div
  className=
      y-block
      y-textSize-mediumSub
      y-dropdown--item
      {
        font-size: 1.4rem;
        line-height: 2.0rem;
      }
      & .y-icon {
        height: 1.4rem;
        width: 1.4rem;
      }
      & .y-text__ellipsis {
        vertical-align: -0.5rem;
      }
>
  <div
    className=
        y-block--inner
        {
          overflow-wrap: break-word;
          word-wrap: break-word;
        }
  >
    <div
      className="y-dropdown--ellipsed-title"
    >
      <span>
        <Text
          bold={true}
        >
          <span
            className=
                y-text
                {
                  display: inline-block;
                  font-weight: 600;
                }
          >
            label
            :
          </span>
        </Text>
         
        with icon
      </span>
    </div>
  </div>
</div>
`;

exports[`<Dropdown /> when onRenderTitle is called with an array of items renders as expected 1`] = `
<CustomizedBlock
  className="y-dropdown--item y-dropdown--header"
  textSize="small"
>
  foo
</CustomizedBlock>
`;

exports[`<Dropdown /> when onRenderTitle is called with an empty array renders as expected 1`] = `null`;

exports[`<Dropdown /> when onRenderTitle is called with null returns the expected value 1`] = `null`;

exports[`<Dropdown /> with additional className matches its snapshot 1`] = `
<div
  className="y-dropdown TEST_CLASSNAME"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={Array []}
  />
</div>
`;

exports[`<Dropdown /> with all props matches its snapshot 1`] = `
<div
  className="y-dropdown TEST_CLASSNAME"
>
  <WithResponsiveMode
    ariaLabel="ARIA_LABEL"
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    label="TEST_LABEL"
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={
      Array [
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "A",
          "text": "Option a",
        },
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "B",
          "text": "Option b",
        },
      ]
    }
    placeHolder="TEST_PLACEHOLDER"
    selectedKey="A"
  />
</div>
`;

exports[`<Dropdown /> with default options matches its snapshot 1`] = `
<div
  className="y-dropdown"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={Array []}
  />
</div>
`;

exports[`<Dropdown /> with divider matches its snapshot 1`] = `null`;

exports[`<Dropdown /> with section header matches its snapshot 1`] = `
<div
  className=
      y-block
      y-textSize-small
      y-dropdown--item
      y-dropdown--header
      {
        font-size: 1.2rem;
        line-height: 1.6rem;
      }
      &.y-block .y-icon {
        top: 0.1rem;
      }
      & .y-icon {
        height: 1.2rem;
        width: 1.2rem;
      }
      & .y-text__ellipsis {
        vertical-align: -0.3rem;
      }
>
  <div
    className=
        y-block--inner
        {
          overflow-wrap: break-word;
          word-wrap: break-word;
        }
  >
    header1
  </div>
</div>
`;

exports[`<Dropdown /> without onChanged handler when an option is selected does not blow up 1`] = `
<div
  className="y-dropdown"
>
  <WithResponsiveMode
    calloutProps={
      Object {
        "directionalHintFixed": false,
        "doNotLayer": true,
        "preventDismissOnScroll": true,
      }
    }
    onChanged={[Function]}
    onRenderCaretDown={[Function]}
    onRenderOption={[Function]}
    onRenderPlaceHolder={[Function]}
    onRenderTitle={[Function]}
    options={
      Array [
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "A",
          "text": "Option a",
        },
        Object {
          "data": Object {
            "icon": undefined,
            "label": undefined,
          },
          "itemType": undefined,
          "key": "B",
          "text": "Option b",
        },
      ]
    }
  />
</div>
`;
