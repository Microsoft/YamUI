// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<EditableText /> with additional className matches its snapshot 1`] = `
<span
  className=
      y-editableText
      TEST_CLASSNAME
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    />
  </CustomizedClickable>
</span>
`;

exports[`<EditableText /> with all props except promptText matches its snapshot 1`] = `
<span
  className=
      y-editableText
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    >
      TEXT
    </span>
  </CustomizedClickable>
</span>
`;

exports[`<EditableText /> with all props except promptText when clicked and text is changed and ENTER is pressed exits edit mode 1`] = `
<span
  className=
      y-editableText
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    >
      TEXT
    </span>
  </CustomizedClickable>
</span>
`;

exports[`<EditableText /> with all props except promptText when clicked and text is changed and ESC is pressed exits edit mode 1`] = `
<span
  className=
      y-editableText
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    >
      TEXT
    </span>
  </CustomizedClickable>
</span>
`;

exports[`<EditableText /> with all props except promptText when clicked and text is changed and an unimportant key is pressed remains in edit mode 1`] = `
<div
  className=
      y-editableText

>
  <TextField
    focusableRef={[Function]}
    maxLength={120}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    placeHolder="PLACEHOLDER"
    underlined={true}
    value="new text"
  />
</div>
`;

exports[`<EditableText /> with all props except promptText when clicked enters edit mode 1`] = `
<div
  className=
      y-editableText

>
  <TextField
    focusableRef={[Function]}
    maxLength={120}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    placeHolder="PLACEHOLDER"
    underlined={true}
    value="TEXT"
  />
</div>
`;

exports[`<EditableText /> with all props except promptText when clicked when triggered to enter edit mode again remains in edit mode 1`] = `
<div
  className=
      y-editableText

>
  <TextField
    focusableRef={[Function]}
    maxLength={120}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    placeHolder="PLACEHOLDER"
    underlined={true}
    value="TEXT"
  />
</div>
`;

exports[`<EditableText /> with all props except promptText when clicked when triggered to enter edit mode without private textFieldRef remains in edit mode 1`] = `
<div
  className=
      y-editableText

>
  <TextField
    focusableRef={[Function]}
    maxLength={120}
    onBlur={[Function]}
    onChange={[Function]}
    onKeyDown={[Function]}
    placeHolder="PLACEHOLDER"
    underlined={true}
    value="TEXT"
  />
</div>
`;

exports[`<EditableText /> with promptText matches its snapshot 1`] = `
<span
  className=
      y-editableText
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    ariaLabel="PROMPT TEXT"
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    >
      PROMPT TEXT
    </span>
  </CustomizedClickable>
</span>
`;

exports[`<EditableText /> without props when clicked and text is changed and ENTER is pressed exits edit mode 1`] = `
<span
  className=
      y-editableText
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    />
  </CustomizedClickable>
</span>
`;

exports[`<EditableText /> without props when clicked and text is changed and ESC is pressed exits edit mode 1`] = `
<span
  className=
      y-editableText
      {
        color: #646d7a;
      }
      &:hover {
        color: #495361;
      }
      &:active {
        color: #495361;
      }
      &:focus {
        color: #495361;
      }
>
  <CustomizedClickable
    focusableRef={[Function]}
    onClick={[Function]}
    unstyled={true}
  >
    <Edit />
    <span
      className=

          {
            padding-left: 0.2rem;
          }
          &:hover {
            text-decoration: underline;
          }
          &:active {
            text-decoration: underline;
          }
          &:focus {
            text-decoration: underline;
          }
    />
  </CustomizedClickable>
</span>
`;
